// src/frontOffice/hooks/useSchedulerData.ts
import { useState } from "react";
import { AppointmentData, BreakData, WorkHoursData } from "../types";

// Mock data (move to separate file)
const mockAppointments: AppointmentData[] = [
  {
    abID: 1,
    abFName: "John",
    abLName: "Doe",
    hplID: 1,
    providerName: "Dr. Smith",
    rlID: 1,
    rlName: "Room 1",
    abDuration: 30,
    abDurDesc: "30m",
    abDate: new Date(2025, 6, 22),
    abTime: new Date(2025, 6, 22, 9, 0),
    abEndTime: new Date(2025, 6, 22, 9, 30),
    pChartID: 123,
    pChartCode: "P001",
    abPType: "OP",
    abStatus: "Scheduled",
    patRegisterYN: "Y",
    procNotes: "Regular checkup",
  },
  {
    abID: 5,
    abFName: "Akshay",
    abLName: "Kumar",
    hplID: 1,
    providerName: "Dr. Smith",
    rlID: 2,
    rlName: "Room 2",
    abDuration: 45,
    abDurDesc: "45m",
    abDate: new Date(2025, 6, 22),
    abTime: new Date(2025, 6, 22, 9, 0),
    abEndTime: new Date(2025, 6, 22, 9, 45),
    pChartID: 124,
    pChartCode: "P002",
    abPType: "OP",
    abStatus: "Scheduled",
    patRegisterYN: "Y",
    procNotes: "Regular checkup",
  },
  {
    abID: 2,
    abFName: "Jane",
    abLName: "Smith",
    hplID: 1,
    providerName: "Dr. Smith",
    rlID: 2,
    rlName: "Room 2",
    abDuration: 45,
    abDurDesc: "45m",
    abDate: new Date(2025, 6, 22),
    abTime: new Date(2025, 6, 22, 10, 0),
    abEndTime: new Date(2025, 6, 22, 10, 45),
    pChartID: 125,
    pChartCode: "P003",
    abPType: "OP",
    abStatus: "Confirmed",
    patRegisterYN: "Y",
    procNotes: "Follow-up",
  },
  {
    abID: 3,
    abFName: "Mithun",
    abLName: "T",
    hplID: 2,
    providerName: "Dr. Johnson",
    rlID: 1,
    rlName: "Room 1",
    abDuration: 15,
    abDurDesc: "15m",
    abDate: new Date(2025, 6, 23),
    abTime: new Date(2025, 6, 23, 14, 15),
    abEndTime: new Date(2025, 6, 23, 14, 30),
    pChartID: 126,
    pChartCode: "P004",
    abPType: "OP",
    abStatus: "Confirmed",
    patRegisterYN: "Y",
    procNotes: "Quick consultation",
  },
  {
    abID: 8,
    abFName: "Ashwath",
    abLName: "M H",
    hplID: 2,
    providerName: "Dr. Johnson",
    rlID: 1,
    rlName: "Room 1",
    abDuration: 30,
    abDurDesc: "30m",
    abDate: new Date(2025, 6, 23),
    abTime: new Date(2025, 6, 23, 13, 15),
    abEndTime: new Date(2025, 6, 23, 13, 30),
    pChartID: 126,
    pChartCode: "P004",
    abPType: "OP",
    abStatus: "Confirmed",
    patRegisterYN: "Y",
    procNotes: "Quick consultation",
  },
  {
    abID: 4,
    abFName: "Alice",
    abLName: "Brown",
    hplID: 1,
    providerName: "Dr. Smith",
    rlID: 1,
    rlName: "Room 1",
    abDuration: 60,
    abDurDesc: "1h",
    abDate: new Date(2025, 6, 24),
    abTime: new Date(2025, 6, 24, 11, 0),
    abEndTime: new Date(2025, 6, 24, 12, 0),
    pChartID: 127,
    pChartCode: "P005",
    abPType: "OP",
    abStatus: "Scheduled",
    patRegisterYN: "Y",
    procNotes: "Comprehensive exam",
  },
  {
    abID: 6,
    abFName: "Lakshmi",
    abLName: "M",
    hplID: 1,
    providerName: "Dr. Smith",
    rlID: 1,
    rlName: "Room 1",
    abDuration: 45,
    abDurDesc: "45m",
    abDate: new Date(2025, 6, 24),
    abTime: new Date(2025, 6, 24, 11, 0),
    abEndTime: new Date(2025, 6, 24, 11, 45),
    pChartID: 128,
    pChartCode: "P006",
    abPType: "OP",
    abStatus: "Scheduled",
    patRegisterYN: "Y",
    procNotes: "Comprehensive exam",
  },
  // Adding more overlapping appointments for testing
  {
    abID: 7,
    abFName: "Sarah",
    abLName: "Connor",
    hplID: 1,
    providerName: "Dr. Smith",
    rlID: 3,
    rlName: "Room 3",
    abDuration: 30,
    abDurDesc: "30m",
    abDate: new Date(2025, 6, 22),
    abTime: new Date(2025, 6, 22, 9, 0),
    abEndTime: new Date(2025, 6, 22, 9, 30),
    pChartID: 129,
    pChartCode: "P007",
    abPType: "OP",
    abStatus: "Confirmed",
    patRegisterYN: "Y",
    procNotes: "Consultation",
  },
];

const mockBreaks: BreakData[] = [
  {
    bLID: 1,
    bLName: "Lunch",
    bLStartTime: new Date(2025, 6, 22, 12, 0),
    bLEndTime: new Date(2025, 6, 22, 13, 0),
    bLStartDate: new Date(2025, 6, 22),
    bLEndDate: new Date(2025, 6, 22),
    hPLID: 1,
    assignedName: "Dr. Smith",
    isPhyResYN: "Y",
    rActiveYN: "Y",
  },
];

const mockWorkHours: WorkHoursData[] = [
  {
    hwrkID: 1,
    langType: "EN",
    daysDesc: "MONDAY",
    startTime: new Date(2025, 6, 22, 8, 0),
    endTime: new Date(2025, 6, 22, 17, 0),
    wkHoliday: "N",
    rActiveYN: "Y",
  },
  {
    hwrkID: 2,
    langType: "EN",
    daysDesc: "TUESDAY",
    startTime: new Date(2025, 6, 22, 8, 0),
    endTime: new Date(2025, 6, 22, 17, 0),
    wkHoliday: "N",
    rActiveYN: "Y",
  },
  {
    hwrkID: 3,
    langType: "EN",
    daysDesc: "WEDNESDAY",
    startTime: new Date(2025, 6, 22, 8, 0),
    endTime: new Date(2025, 6, 22, 17, 0),
    wkHoliday: "N",
    rActiveYN: "Y",
  },
  {
    hwrkID: 4,
    langType: "EN",
    daysDesc: "THURSDAY",
    startTime: new Date(2025, 6, 22, 8, 0),
    endTime: new Date(2025, 6, 22, 17, 0),
    wkHoliday: "N",
    rActiveYN: "Y",
  },
  {
    hwrkID: 5,
    langType: "EN",
    daysDesc: "FRIDAY",
    startTime: new Date(2025, 6, 22, 8, 0),
    endTime: new Date(2025, 6, 22, 17, 0),
    wkHoliday: "N",
    rActiveYN: "Y",
  },
];

export const useSchedulerData = () => {
  const [appointments, setAppointments] = useState<AppointmentData[]>(mockAppointments);
  const [breaks, setBreaks] = useState<BreakData[]>(mockBreaks);
  const [workHours, setWorkHours] = useState<WorkHoursData[]>(mockWorkHours);

  return {
    appointments,
    setAppointments,
    breaks,
    setBreaks,
    workHours,
    setWorkHours,
  };
};
